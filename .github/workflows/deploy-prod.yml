name: Deploy to Production

on:
  push:
    branches:
      - main
    tags:
      - v*
  workflow_dispatch:

jobs:
  run_pull:
    name: run pull
    runs-on: ubuntu-latest

    steps:
      - name: Debug trigger info
        run: |
          echo "Workflow triggered by: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Ref type: ${{ github.ref_type }}"
          echo "Tag name: ${{ github.event.head_commit.message }}"
      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PROD_HOST }} > ~/.ssh/known_hosts
      - name: connect and pull
        run: |
          ssh -i ~/.ssh/id_rsa -p ${{ secrets.PROD_PORT }} ${{ secrets.PROD_USERNAME }}@${{ secrets.PROD_HOST }} \
          "cd ${{ secrets.PROD_APP_PATH }} && \
          git checkout main && \
          git pull --rebase"

  build_containers:
    needs: run_pull
    runs-on: ubuntu-latest
    steps:
      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PROD_HOST }} > ~/.ssh/known_hosts
      - name: building docker images
        run: |
          ssh -i ~/.ssh/id_rsa -p ${{ secrets.PROD_PORT }} ${{ secrets.PROD_USERNAME }}@${{ secrets.PROD_HOST }} \
          "cd ${{ secrets.PROD_APP_PATH }} && \
          docker compose build --no-cache"

  start_cluster:
    needs: build_containers
    runs-on: ubuntu-latest
    steps:
      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PROD_HOST }} > ~/.ssh/known_hosts
      - name: start cluster
        run: |
          ssh -i ~/.ssh/id_rsa -p ${{ secrets.PROD_PORT }} ${{ secrets.PROD_USERNAME }}@${{ secrets.PROD_HOST }} \
          "cd ${{ secrets.PROD_APP_PATH }} && \
          chmod +x scripts/start-cluster.sh && \
          ./scripts/start-cluster.sh"
      - name: verify deployment
        run: |
          ssh -i ~/.ssh/id_rsa -p ${{ secrets.PROD_PORT }} ${{ secrets.PROD_USERNAME }}@${{ secrets.PROD_HOST }} \
          "cd ${{ secrets.PROD_APP_PATH }} && \
          docker compose ps && \
          echo 'Checking data directory permissions:' && \
          ls -la llm-api-service/data/ && \
          echo 'Checking logs directory permissions:' && \
          ls -la logs/ && \
          echo 'Testing database write access:' && \
          touch llm-api-service/data/test_write && rm -f llm-api-service/data/test_write && \
          echo 'Database write test successful'"

  clear_old_versions:
    needs: start_cluster
    runs-on: ubuntu-latest
    steps:
      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PROD_HOST }} > ~/.ssh/known_hosts
      - name: prune all
        run: |
          ssh -i ~/.ssh/id_rsa -p ${{ secrets.PROD_PORT }} ${{ secrets.PROD_USERNAME }}@${{ secrets.PROD_HOST }} \
          "docker system prune -a"
  clean_up:
    needs: clear_old_versions
    runs-on: ubuntu-latest
    steps:
      - name: clean up
        run: rm -rf ~/.ssh