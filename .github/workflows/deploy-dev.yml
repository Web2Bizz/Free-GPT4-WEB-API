name: Deploy to Development

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  # Job 1: Test Development Environment
  test_dev_environment:
    name: Test Development Environment
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build dev images
        run: |
          # Build images in parallel with cache
          docker compose -f docker-compose.dev.yml build --parallel --build-arg BUILDKIT_INLINE_CACHE=1
      
      - name: Start dev environment
        run: |
          docker compose -f docker-compose.dev.yml up -d
      
      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          sleep 30
      
      - name: Health check
        run: |
          echo "Checking service health..."
          curl -f http://localhost:15433/health || exit 1
          echo "Dev environment is healthy!"
      
      - name: Run basic tests
        run: |
          echo "Running basic functionality tests..."
          curl -f "http://localhost:15433/?text=Hello" || exit 1
          echo "API tests passed!"
      
      - name: Cleanup dev environment
        if: always()
        run: |
          echo "Cleaning up dev environment..."
          docker compose -f docker-compose.dev.yml down -v
          docker system prune -f

  # Job 2: Merge to Main via GitHub API (depends on successful testing)
  merge_to_main:
    name: Merge Dev to Main via API
    runs-on: ubuntu-latest
    needs: test_dev_environment
    if: github.event_name == 'push'
    
    permissions:
      contents: write
      pull-requests: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
      
      - name: Merge via GitHub API
        run: |
          echo "Dev tests passed! Merging via GitHub API..."
          echo "Using token: ${{ secrets.PAT_TOKEN != '' && 'PAT_TOKEN' || 'GITHUB_TOKEN' }}"
          
          # Set up authentication
          TOKEN="${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}"
          REPO="${{ github.repository }}"
          
          # Get current commit SHA from dev branch
          DEV_SHA=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$REPO/git/refs/heads/dev" | \
            jq -r '.object.sha')
          
          echo "Dev branch SHA: $DEV_SHA"
          
          # Get main branch SHA
          MAIN_SHA=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$REPO/git/refs/heads/main" | \
            jq -r '.object.sha')
          
          echo "Main branch SHA: $MAIN_SHA"
          
          # Check if fast-forward is possible
          MERGE_BASE=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$REPO/compare/$MAIN_SHA...$DEV_SHA" | \
            jq -r '.merge_base_commit.sha')
          
          echo "Merge base SHA: $MERGE_BASE"
          
          if [ "$MERGE_BASE" = "$MAIN_SHA" ]; then
            echo "Fast-forward merge possible"
            # Fast-forward merge via API
            curl -s -X POST \
              -H "Authorization: token $TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$REPO/git/refs/heads/main" \
              -d "{
                \"sha\": \"$DEV_SHA\",
                \"force\": false
              }" | jq '.'
          else
            echo "Branches diverged, creating merge commit"
            # Create merge commit via API
            curl -s -X POST \
              -H "Authorization: token $TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$REPO/merges" \
              -d "{
                \"base\": \"main\",
                \"head\": \"dev\",
                \"commit_message\": \"Merge dev into main via GitHub Actions\"
              }" | jq '.'
          fi
          
          echo "Successfully merged dev into main via GitHub API!"

  # Job 3: Create Version Tag via GitHub API (depends on successful merge)
  create_version_tag:
    name: Create Version Tag via API
    runs-on: ubuntu-latest
    needs: merge_to_main
    if: github.event_name == 'push'
    
    permissions:
      contents: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
      
      - name: Create version tag via GitHub API
        run: |
          echo "Creating version tag via GitHub API..."
          echo "Using token: ${{ secrets.PAT_TOKEN != '' && 'PAT_TOKEN' || 'GITHUB_TOKEN' }}"
          
          # Set up authentication
          TOKEN="${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}"
          REPO="${{ github.repository }}"
          
          # Get the latest tag via GitHub API
          LATEST_TAG=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$REPO/tags" | \
            jq -r '.[0].name // "v0.0.0"')
          
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version number and increment patch version
          VERSION=$(echo $LATEST_TAG | sed 's/v//')
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "Creating new tag: $NEW_VERSION"
          
          # Get main branch SHA
          MAIN_SHA=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$REPO/git/refs/heads/main" | \
            jq -r '.object.sha')
          
          echo "Main branch SHA: $MAIN_SHA"
          
          # Create tag via GitHub API
          curl -s -X POST \
            -H "Authorization: token $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO/git/refs" \
            -d "{
              \"ref\": \"refs/tags/$NEW_VERSION\",
              \"sha\": \"$MAIN_SHA\"
            }" | jq '.'
          
          # Debug: Verify tag was created
          echo "Verifying tag was created..."
          curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$REPO/git/refs/tags/$NEW_VERSION" | jq '.'
          
          echo "Successfully created tag: $NEW_VERSION"
          echo "This should trigger the production deployment workflow"

  # Job 4: Notify on Failure
  notify_failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test_dev_environment, merge_to_main, create_version_tag]
    if: failure()
    
    steps:
      - name: Notify failure
        run: |
          echo "Dev deployment failed! Check the logs above."
          echo "Failed job: ${{ needs.test_dev_environment.result || needs.merge_to_main.result || needs.create_version_tag.result }}"
  
  notify_success:
    name: Notify success
    runs-on: ubuntu-latest
    needs: [test_dev_environment, merge_to_main, create_version_tag]
    if: success()
    
    steps:
      - name: Notify success
        run: |
          echo "✅ Dev workflow completed successfully"
          echo "✅ Tag $NEW_VERSION created"
          echo "✅ Production deployment should start soon"
