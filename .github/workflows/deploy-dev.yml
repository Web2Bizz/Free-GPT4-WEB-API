name: Deploy to Development

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  # Job 1: Test Development Environment
  test_dev_environment:
    name: Test Development Environment
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build dev images
        run: |
          # Build images in parallel with cache
          docker compose -f docker-compose.dev.yml build --parallel --build-arg BUILDKIT_INLINE_CACHE=1
      
      - name: Start dev environment
        run: |
          docker compose -f docker-compose.dev.yml up -d
      
      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          sleep 30
      
      - name: Health check
        run: |
          echo "Checking service health..."
          curl -f http://localhost:15433/health || exit 1
          echo "Dev environment is healthy!"
      
      - name: Run basic tests
        run: |
          echo "Running basic functionality tests..."
          curl -f "http://localhost:15433/?text=Hello" || exit 1
          echo "API tests passed!"
      
      - name: Cleanup dev environment
        if: always()
        run: |
          echo "Cleaning up dev environment..."
          docker compose -f docker-compose.dev.yml down -v
          docker system prune -f

  # Job 2: Merge to Main (depends on successful testing)
  merge_to_main:
    name: Merge Dev to Main
    runs-on: ubuntu-latest
    needs: test_dev_environment
    if: github.event_name == 'push'
    
    permissions:
      contents: write
      pull-requests: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create Pull Request
        run: |
          echo "Dev tests passed! Creating Pull Request..."
          git config --local user.email "${{ secrets.GIT_EMAIL }}"
          git config --local user.name "${{ secrets.GIT_USERNAME }}"
          
          # Fetch all branches
          git fetch origin
          
          # Checkout main branch
          git checkout main
          git pull origin main
          
          # Check if fast-forward is possible
          if git merge-base --is-ancestor main dev; then
            echo "Fast-forward merge possible"
            git merge dev --ff-only
          else
            echo "Branches diverged, rebasing dev onto main first"
            # Switch to dev and rebase onto main
            git checkout dev
            git rebase main
            # Switch back to main and fast-forward
            git checkout main
            git merge dev --ff-only
          fi
          
          # Force push to main (bypassing branch protection rules)
          git push origin main
          echo "Successfully pushed to main! Force push completed."

  # Job 3: Create Version Tag (depends on successful merge)
  create_version_tag:
    name: Create Version Tag
    runs-on: ubuntu-latest
    needs: merge_to_main
    if: github.event_name == 'push'
    
    permissions:
      contents: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create version tag
        run: |
          echo "Creating version tag..."
          
          # Get the latest tag
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version number and increment patch version
          VERSION=$(echo $LATEST_TAG | sed 's/v//')
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "Creating new tag: $NEW_VERSION"
          
          git config --local user.email "${{ secrets.GIT_EMAIL }}"
          git config --local user.name "${{ secrets.GIT_USERNAME }}"

          # Create and push tag
          git tag "$NEW_VERSION"
          
          # Debug: Show current tags before push
          echo "Current tags before push:"
          git tag --sort=-version:refname | head -5
          
          # Push the tag
          git push origin "$NEW_VERSION"
          
          # Debug: Verify tag was pushed
          echo "Verifying tag was pushed..."
          git ls-remote --tags origin | grep "$NEW_VERSION"
          
          echo "Successfully created and pushed tag: $NEW_VERSION"
          echo "This should trigger the production deployment workflow"

  # Job 4: Notify on Failure
  notify_failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test_dev_environment, merge_to_main, create_version_tag]
    if: failure()
    
    steps:
      - name: Notify failure
        run: |
          echo "Dev deployment failed! Check the logs above."
          echo "Failed job: ${{ needs.test_dev_environment.result || needs.merge_to_main.result || needs.create_version_tag.result }}"
  
  notify_success:
    name: Notify success
    runs-on: ubuntu-latest
    needs: [test_dev_environment, merge_to_main, create_version_tag]
    if: success()
    
    steps:
      - name: Notify success
        run: |
          echo "✅ Dev workflow completed successfully"
          echo "✅ Tag $NEW_VERSION created"
          echo "✅ Production deployment should start soon"
